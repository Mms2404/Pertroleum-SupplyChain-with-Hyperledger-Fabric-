1 . Petroleum-Supplychain/      [ Create the folders ]
       ├── crypto-config/
       ├── config/
       ├── channel-artifacts/

       | Folder               | Purpose                                            |
       | -------------------- | -------------------------------------------------- |
       | `crypto-config/`     | Output from `cryptogen`: MSP & TLS certs           |
       | `config/`            | Input YAMLs: `crypto-config.yaml`, `configtx.yaml` |
       | `channel-artifacts/` | Output from `configtxgen`: genesis block, etc.     |

2. create and write into config/crypto-config.yaml  ( refer the repo to write it )

3. Then to continue :
     - make sure you have fabric samples downloaded (curl -sSL https://bit.ly/2ysbOFE | bash -s) and have set the path (bin) in the environment 
     - project directory -> wsl terminal 
     - cryptogen version  ( if this runs ... your good to good )

4. run - cryptogen generate --config=config/crypto-config.yaml --output=crypto-config     [generates the certificates (cryptographic identities) inside the folder crypto-config]

5. create and write into configtx.yaml :
       Petroleum-Supplychain/
       ├── config/                    # YAML files for crypto and configtx
       │   └── configtx.yaml  -> create and write here
       │   └── crypto-config.yaml  
       ├── crypto-config/    
       │   └── oerderer and peer organizations      # Output from cryptogen (already created)
       ├── channel-artifacts/        # Will hold generated genesis block and tx files

6 . [create genesis block for RAFT orderer] 
    **(NOTE : DEFINE THE POLICIES PROPERLY : VERY IMPORTANT : CAREFUL INTENDATION)**

 configtxgen -profile SupplyChainGenesis 
 -channelID system-channel -outputBlock ./channel-artifacts/genesis.block 
 --configPath ./config

   
7 . [create the channel transaction (needed to create the application channel later.)]
    configtxgen -profile SupplyChainChannel \
    -outputCreateChannelTx ./channel-artifacts/supplychannel.tx \
    -channelID supplychannel \
    --configPath ./config

8. create anchor peer update transactions

   configtxgen -profile SupplyChainChannel -outputAnchorPeersUpdate ./channel-artifacts/Org1Anchors.tx -channelID supplychannel -asOrg Org1MSP --configPath ./config
   configtxgen -profile SupplyChainChannel -outputAnchorPeersUpdate ./channel-artifacts/Org2Anchors.tx -channelID supplychannel -asOrg Org2MSP --configPath ./config
   configtxgen -profile SupplyChainChannel -outputAnchorPeersUpdate ./channel-artifacts/Org3Anchors.tx -channelID supplychannel -asOrg Org3MSP --configPath ./config

9 . Starting the orderer and peers for channel-related transactions (creation, join, anchor updates)
     
     create docker-compose.yaml file in your project directory   [ 1 RAFT orderer , 3 peers , 1 CLI container for channel operations]
     [docker-compose.yaml cannot be automatically generated by a Hyperledger Fabric tool like cryptogen or configtxgen—you have to write or manually configure it based on your network's topology ( like the number or organizations and peers with their roles , policies )]
     
     docker-compose -f docker-compose.yaml up -d

10 . Use each organization's admin identity to create the channel named supplychannel

    docker exec -it cli bash
    ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt
    ( creating channel si common , not for each organizations )

    peer channel create \
  -o orderer.example.com:7050 \
  --ordererTLSHostnameOverride orderer.example.com \
  -c supplychannel \
  -f ./channel-artifacts/supplychannel.tx \
  --outputBlock ./channel-artifacts/supplychannel.block \
  --tls --cafile $ORDERER_CA

  ( mv ./supplychannel.block ./channel-artifacts/ )
  
11 .  JOIN ALL PEERS IN THE CHANNEL :

    Setting env variables  ( for 3 organizations ) - create the following files and write as in the repo
    Petroleum-supplychain / setEnvOrg1.sh
    Petroleum-supplychain / setEnvOrg2.sh
    Petroleum-supplychain / setEnvOrg3.sh

    ( for joining all peers in cli ) :

    docker exec -it cli bash

    source setEnvOrg1.sh
    peer channel join -b ./channel-artifacts/supplychannel.block

    source setEnvOrg2.sh
    peer channel join -b ./channel-artifacts/supplychannel.block

    source setEnvOrg3.sh
    peer channel join -b ./channel-artifacts/supplychannel.block
    

    UPADTE CHANNEL FOR EACH PEER :

    source setEnvOrg1.sh
    peer channel update -o orderer.example.com:7050 \
  --ordererTLSHostnameOverride orderer.example.com \
  -c supplychannel -f ./channel-artifacts/Org1Anchors.tx \
  --tls --cafile $ORDERER_CA

    source setEnvOrg2.sh   
   peer channel update -o orderer.example.com:7050 \
  --ordererTLSHostnameOverride orderer.example.com \
  -c supplychannel -f ./channel-artifacts/Org2Anchors.tx \
  --tls --cafile $ORDERER_CA

    source setEnvOrg3.sh
    peer channel update -o orderer.example.com:7050 \
  --ordererTLSHostnameOverride orderer.example.com \
  -c supplychannel -f ./channel-artifacts/Org3Anchors.tx \
  --tls --cafile $ORDERER_CA
    


12 . Once this is succcessful :
       => Your channel configuration chnages have been accepted by the orderer ; 
       => before update , peers join the channel and become the part of same ledger ;
       => after update , specific peers as “anchor” points for gossip communication between organizations — enabling proper cross-org peer discovery and block dissemination.


[TILL NOW YOU HAVE :
Generated cryptographic material ✅

Created and joined a channel ✅

Submitted anchor peer updates ✅ ]


13 . WRITING CHAINCODES ON PEERS :

   Fields :
   batchID – Unique identifier for each petroleum batch.
   origin – Where the batch originates (e.g., refinery or extraction site).
   destination – Where the batch is headed (e.g., distributor or gas station).
   quantityInBarrels – Amount of petroleum in the batch.
   owner – Current owner of the batch.
   receiver – Intended recipient.
   status – Current state of the batch (e.g., “in-transit”, “delivered”).
   timestamp – When the record was created or last updated.
   
14 . In ur project directory , create the folder structure as given below :

chaincode/
└── petroleum/
   ├── build.gradle  ( copy the file from repo )
   └── src/
       └── main/
           └── java/
               └── org/
                   └── petroleum/   ( write the chaincodes )
                       ├── PetroleumChaincode.java  
                       └── Batch.java (optional)


15 . CORE CHAINCODE FUNCTIONS

| Function Name       | Purpose                                                           | When to Call                              |
| ------------------- | ----------------------------------------------------------------- | ----------------------------------------- |
| `createBatch`       | Creates and registers a new petroleum batch on the ledger         | When a new batch is produced              |
| `queryBatch`        | Retrieves details of a batch using its `batchID`                  | To view details of a batch                |
| `updateStatus`      | Updates the `status` of a batch (e.g., "In Transit", "Delivered") | When the batch changes state              |
| `transferOwnership` | Changes the `owner` and/or `receiver` of a batch                  | When it’s sold/transferred to another org |
| `getAllBatches`     | Returns all petroleum batches in the ledger                       | For auditing, analytics, or list display  |

16 . create , write and build build.gradle 
    cd chaincode/petroleum
    gradle installDist

17. once the build is succcessful , our chaincode JAR should be at :
    chaincode/petroleum/build/install/petroleum/lib/petroleum-1.0.jar


18 . Chaincode packaging
     
     cd chaincode/petroleum
     make folders packaged-chaincode/petroleum
      - copy the chaincode JAR into the folder
        cp build/install/petroleum/lib/petroleum-1.0.jar packaged-chaincode/petroleum
 
19 . creating metadata.json

chaincode/petroleum/packaged-chaincode/petroleum
├── petroleum-1.0.jar
└── metadata.json

20 . Copy the core.yaml file from fabric-samples to Petroleum-supplychain/config  or run the below :
cp /mnt/c/Users/madhu/Desktop/fabric-samples/config/core.yaml /mnt/c/Users/madhu/OneDrive/Desktop/Petroleum-supplychain/config/


21 . Package usinf peer CLI 
   peer lifecycle chaincode package petroleum.tar.gz \
  --path ./chaincode/petroleum/build/install/petroleum \
  --lang java \
  --label petroleum_1

  ( now to check if the petroleum.tar.gz is created...run "ls" in the same cli )

  [ chaincode Java files (compiled) in packaged-chaincode/petroleum were bundled 
  into a .tar.gz package named petroleum.tar.gz. ]

  THIS PACKAGE (deployable chaincode artifact) gets installed on the Fabric peers


       ** CHAINCODE LIFECYCLE [ INSTALL , APPROVE , COMMIT ]**   - should run all the commands in CLI container for each organizatons .

22 .  INSTALLING :    [ inside container ] 

[ in ur core.yaml : line 276 : ensure peer : tls : enabled : true]
   
[ .jar file isnt usable directly inside cli , so we ahve to copy the .jar file to cli and also the setEnvOrg.sh files so that we can set environment for each organizations and install in each one of them, look below : ] :

docker cp petroleum.tar.gz cli:/opt/gopath/src/github.com/
docker cp setEnvOrg1.sh cli:/opt/gopath/src/github.com/
docker cp setEnvOrg2.sh cli:/opt/gopath/src/github.com/
docker cp setEnvOrg3.sh cli:/opt/gopath/src/github.com/

After copying the file into cli , enter into cli -> continue as follows :

docker exec -it cli bash
 cd /opt/gopath/src/github.com/
 ls    => check if the chaincode is there 

source setEnvOrg1
peer lifecycle chaincode install petroleum.tar.gz

source setEnvOrg2
peer lifecycle chaincode install petroleum.tar.gz

source setEnvOrg3
peer lifecycle chaincode install petroleum.tar.gz

On successful installation of chaincodes ,you will get chaincode package ID and make a note of it coz we need it for the next step ( eg:  Chaincode code package identifier: petroleum_1:d9338f2d47ba2461375abe3e477983b7afadba9e3458127ba8a1f32a52e73f31 )
And if source setEnvOrg.sh doenst work properly ..... you can just copy paste the codes from that file and run it in cli to set the env variables for each organizations.


23 . APPROVING CHAINCODE : (do for each organizations) 

peer lifecycle chaincode approveformyorg \
  --orderer orderer.example.com:7050 \
  --ordererTLSHostnameOverride orderer.example.com \
  --channelID supplychannel \
  --name petroleum \
  --version 1.0 \
  --package-id petroleum_1:d9338f2d47ba2461375abe3e477983b7afadba9e3458127ba8a1f32a52e73f31 \
  --sequence 1 \
  --tls \
  --cafile $ORDERER_CA


  [ I MISSED SOME ENDORSEMENT POLICIES IN MY configtx.yaml (be very careful) => teared down my whole network and build a new one ...]

export CORE_PEER_LOCALMSPID="Org1MSP"
export CORE_PEER_MSPCONFIGPATH="/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp"
export CORE_PEER_ADDRESS="peer0.org1.example.com:7051"
export CORE_PEER_TLS_ROOTCERT_FILE="/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt"
export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt

export CORE_PEER_LOCALMSPID="Org2MSP"
export CORE_PEER_MSPCONFIGPATH="/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp"
export CORE_PEER_ADDRESS="peer0.org2.example.com:8051"
export CORE_PEER_TLS_ROOTCERT_FILE="/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt"
export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt

export CORE_PEER_LOCALMSPID="Org3MSP"
export CORE_PEER_MSPCONFIGPATH="/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp"
export CORE_PEER_ADDRESS="peer0.org3.example.com:9051"
export CORE_PEER_TLS_ROOTCERT_FILE="/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt"
export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt



peer lifecycle chaincode approveformyorg \
  --orderer orderer.example.com:7050 \
  --ordererTLSHostnameOverride orderer.example.com \
  --channelID supplychannel \
  --name petroleum_1 \
  --version 1.0 \
  --package-id petroleum_1:d9338f2d47ba2461375abe3e477983b7afadba9e3458127ba8a1f32a52e73f31 \
  --sequence 1 \
  --tls \
  --cafile $ORDERER_CA


peer lifecycle chaincode approveformyorg \
  --channelID supplychannel \
  --name petroleum \
  --version 1.0 \
  --package-id petroleum_1:ee56a3dd5bccb0fa18bda065ef3a43ce16dc4e6caa2865216e86d9ce0bbb88e8 \
  --sequence 1 \
  --init-required \
  --orderer orderer.example.com:7050 \
  --tls \
  --cafile $ORDERER_CA

 --cafile string - Path to file containing PEM-encoded trusted certificate(s) 


24 . CHECKING APPROVAL 

(to verify approval status)
peer lifecycle chaincode checkcommitreadiness \
  --channelID supplychannel \
  --name petroleum_1 \
  --version 1.0 \
  --sequence 1 \
  --output json

peer lifecycle chaincode checkcommitreadiness \
  --channelID supplychannel \
  --name petroleum \
  --version 1.0 \
  --sequence 1 \
  --init-required \
  --output json


26 . COMMIT THE CHAINCODE 

peer lifecycle chaincode commit \
  --channelID supplychannel \
  --name petroleum \
  --version 1.0 \
  --sequence 1 \
  --init-required \
  --signature-policy "OR('Org1MSP.peer','Org2MSP.peer','Org3MSP.peer')" \
  --peerAddresses peer0.org1.example.com:7051 \
  --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt \
  --peerAddresses peer0.org2.example.com:8051 \
  --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt \
  --peerAddresses peer0.org3.example.com:9051 \
  --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt \
  --orderer orderer.example.com:7050 \
  --ordererTLSHostnameOverride orderer.example.com \
  --tls \
  --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem


27 . TRY QUERYING ACCORDING TO THE CHAINCODE WRITTEN .

-------------------------------------------------------------
QUICK NEEDS IN cmd :
docker exec -it cli bash
cd /opt/gopath/src/github.com/
